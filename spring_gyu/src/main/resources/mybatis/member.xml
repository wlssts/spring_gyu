<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="member">	
	<!-- LIST -->
	<select id="list" resultType="MemberDTO" parameterType="map">
		SELECT id, name, phone, r
		FROM(
		SELECT
		id, name, phone, rownum r
		FROM(
		SELECT
		id, name, phone
		FROM member
		<where>
			<choose>
				<when test="col=='name'">
					name like '%'||#{word}||'%'
				</when>
				<when test="col=='id'">
					id like '%'||#{word}||'%'
				</when>
			</choose>
		</where>
		ORDER BY id ASC
		)
		)
	<![CDATA[
	WHERE r >= #{sno} AND r <= #{eno}                                          
	]]>
	</select>
	<select id="total" resultType="int" parameterType="map">
		select count(*) from member
		<where>
			<choose>
				<when test="col=='name'">
					name like '%'||#{word}||'%'
				</when>
				<when test="col=='id'">
					id like '%'||#{word}||'%'
				</when>
			</choose>
		</where>
	</select>
	
	<!-- CREATE -->
	<insert id="create" parameterType="MemberDTO">
		INSERT INTO member(id,passwd,name,zipcode,address1,address2,phone)
		VALUES (#{id},#{passwd},#{name},#{zipcode},#{address1},#{address2},#{phone})
	</insert>
	
	<!-- UPDATE -->
	<update id="update" parameterType="MemberDTO">
		UPDATE MEMBER set
		passwd = #{passwd},
		name = #{name},
		zipcode = #{zipcode},
		address1 = #{address2},
		address2 = #{address1},
		phone = #{phone}
		where id = #{id}
	</update>
	<!-- IDcheck -->
	<select id="duplicateId" parameterType="String" resultType="int">
		select count(id) as cnt
		from member
		where id=#{id}
	</select>
	
	<!-- DELETE -->
	<delete id="delete" parameterType="String">
		delete from member where id = #{id}
	</delete>
	
	<!-- READ -->
	<select id="read" resultType="MemberDTO" parameterType="String">
		SELECT * FROM member where id = #{id}
	</select>
	
	<!-- LoginCheck -->
	<select id="loginCheck" parameterType="String" resultType="int">
		select count(*) 
		from member
		where id= #{id}            
		and passwd= #{passwd}       
	</select>
	
	<!-- IdCheck -->
	<select id="idCheck" parameterType="String" resultType="int">
		select count(*)
		from member
		where id = #{id}
	</select>
	
	<!-- GetGrade -->
	<select id="getGrade" parameterType="String" resultType="String">
		select grade from member
		where id = #{id}      
	</select>
</mapper>